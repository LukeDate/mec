{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/MEC-coding-test/mec/src/components/searchResults.js\";\nimport React, { useState } from 'react';\nimport Search from './search';\nimport styled from 'styled-components';\nimport { inject, observer } from 'mobx-react';\nimport { toJS } from 'mobx';\nconst Results = styled('div')`\n    display: flex;\n    width: 75%;\n    flex-wrap: wrap;\n    height: 100vh;\n    justify-content: space-between;\n    >img {\n        width: 32%;\n    }\n`;\n\nconst SearchResults = ({ ...props\n}) => {\n  const [query, setSearchQuery] = useState('');\n  const [results, setSearchResults] = useState([]);\n  const [imgPath, setImagePath] = useState([]);\n\n  const handleSearch = async () => {\n    await props.searchStore.getSearchData(query);\n    setImagePath(toJS(props.searchStore.imageData));\n    setSearchResults(toJS(props.searchStore.searchData));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Search, {\n    setSearchQuery: setSearchQuery,\n    handleSearch: handleSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(Results, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, results.length !== 0 ? 'Search results: ' + query : '', imgPath.map(img => React.createElement(\"img\", {\n    src: img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }))));\n};\n\nexport default inject(\"searchStore\")(observer(SearchResults));","map":{"version":3,"sources":["/Users/admin/Documents/MEC-coding-test/mec/src/components/searchResults.js"],"names":["React","useState","Search","styled","inject","observer","toJS","Results","SearchResults","props","query","setSearchQuery","results","setSearchResults","imgPath","setImagePath","handleSearch","searchStore","getSearchData","imageData","searchData","length","map","img"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AACA,SAASC,IAAT,QAAqB,MAArB;AAEA,MAAMC,OAAO,GAAGJ,MAAM,CAAC,KAAD,CAAQ;;;;;;;;;CAA9B;;AAWA,MAAMK,aAAa,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,KAAkB;AACpC,QAAM,CAACC,KAAD,EAAQC,cAAR,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,gBAAV,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,OAAD,EAAUC,YAAV,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMe,YAAY,GAAG,YAAY;AAC7B,UAAMP,KAAK,CAACQ,WAAN,CAAkBC,aAAlB,CAAgCR,KAAhC,CAAN;AACAK,IAAAA,YAAY,CAACT,IAAI,CAACG,KAAK,CAACQ,WAAN,CAAkBE,SAAnB,CAAL,CAAZ;AACAN,IAAAA,gBAAgB,CAACP,IAAI,CAACG,KAAK,CAACQ,WAAN,CAAkBG,UAAnB,CAAL,CAAhB;AACH,GAJD;;AAMA,SACI,0CACI,oBAAC,MAAD;AAAQ,IAAA,cAAc,EAAET,cAAxB;AAAwC,IAAA,YAAY,EAAEK,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,OAAO,CAACS,MAAR,KAAmB,CAAnB,GAAuB,qBAAqBX,KAA5C,GAAoD,EADzD,EAEKI,OAAO,CAACQ,GAAR,CAAYC,GAAG,IAAI;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnB,CAFL,CAFJ,CADJ;AASH,CApBD;;AAsBA,eAAenB,MAAM,CAAC,aAAD,CAAN,CAAsBC,QAAQ,CAACG,aAAD,CAA9B,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport Search from './search';\nimport styled from 'styled-components';\nimport { inject, observer } from 'mobx-react';\nimport { toJS } from 'mobx';\n\nconst Results = styled('div')`\n    display: flex;\n    width: 75%;\n    flex-wrap: wrap;\n    height: 100vh;\n    justify-content: space-between;\n    >img {\n        width: 32%;\n    }\n`;\n\nconst SearchResults = ({ ...props }) => {\n    const [query, setSearchQuery] = useState('');\n    const [results, setSearchResults] = useState([])\n    const [imgPath, setImagePath] = useState([]);\n    \n    const handleSearch = async () => {\n        await props.searchStore.getSearchData(query);\n        setImagePath(toJS(props.searchStore.imageData));\n        setSearchResults(toJS(props.searchStore.searchData));\n    }\n\n    return (\n        <>\n            <Search setSearchQuery={setSearchQuery} handleSearch={handleSearch}/>\n            <Results>\n                {results.length !== 0 ? 'Search results: ' + query : ''}\n                {imgPath.map(img => <img src={img} />)}\n            </Results>\n        </>\n    )\n}\n\nexport default inject(\"searchStore\")(observer(SearchResults));\n"]},"metadata":{},"sourceType":"module"}