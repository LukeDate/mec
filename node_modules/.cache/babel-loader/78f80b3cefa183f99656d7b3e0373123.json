{"ast":null,"code":"import SearchService from './searchApi';\nimport { observable, decorate } from 'mobx';\n\nclass SearchStore {\n  constructor() {\n    this.searchData = {\n      data: []\n    };\n    this.imageData = {\n      image: []\n    };\n    this.error = \"false\";\n\n    this.getSearchData = async query => {\n      try {\n        const data = await this.searchService.get(query);\n        this.searchData = data.products;\n        this.imageData = data.products.map(image => image.default_image_urls.main_image_url);\n      } catch {\n        this.error = \"true\";\n        console.log(this.error);\n        return this.error;\n      }\n    };\n\n    this.searchService = new SearchService();\n  }\n\n}\n\ndecorate(SearchStore, {\n  searchData: observable\n});\nexport default new SearchStore();","map":{"version":3,"sources":["/Users/admin/Documents/MEC-coding-test/mec/src/mobx/store.js"],"names":["SearchService","observable","decorate","SearchStore","constructor","searchData","data","imageData","image","error","getSearchData","query","searchService","get","products","map","default_image_urls","main_image_url","console","log"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,aAA1B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,MAArC;;AAEA,MAAMC,WAAN,CAAkB;AACdC,EAAAA,WAAW,GAAG;AAAA,SAIdC,UAJc,GAID;AACTC,MAAAA,IAAI,EAAE;AADG,KAJC;AAAA,SAQdC,SARc,GAQF;AACRC,MAAAA,KAAK,EAAE;AADC,KARE;AAAA,SAYdC,KAZc,GAYN,OAZM;;AAAA,SAadC,aAbc,GAaE,MAAMC,KAAN,IAAgB;AAC5B,UAAI;AACA,cAAML,IAAI,GAAG,MAAM,KAAKM,aAAL,CAAmBC,GAAnB,CAAuBF,KAAvB,CAAnB;AACA,aAAKN,UAAL,GAAkBC,IAAI,CAACQ,QAAvB;AACA,aAAKP,SAAL,GAAiBD,IAAI,CAACQ,QAAL,CAAcC,GAAd,CAAkBP,KAAK,IAAIA,KAAK,CAACQ,kBAAN,CAAyBC,cAApD,CAAjB;AACH,OAJD,CAIE,MAAM;AACJ,aAAKR,KAAL,GAAa,MAAb;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAjB;AACA,eAAO,KAAKA,KAAZ;AACH;AACJ,KAvBa;;AACV,SAAKG,aAAL,GAAqB,IAAIZ,aAAJ,EAArB;AACH;;AAHa;;AA2BlBE,QAAQ,CAACC,WAAD,EAAc;AAClBE,EAAAA,UAAU,EAAEJ;AADM,CAAd,CAAR;AAIA,eAAe,IAAIE,WAAJ,EAAf","sourcesContent":["import SearchService from './searchApi';\nimport { observable, decorate } from 'mobx';\n\nclass SearchStore {\n    constructor() {\n        this.searchService = new SearchService();\n    }\n\n    searchData = {\n        data: []\n    }\n\n    imageData = {\n        image: []\n    }\n\n    error = \"false\"\n    getSearchData = async(query) => {\n        try {\n            const data = await this.searchService.get(query);\n            this.searchData = data.products;\n            this.imageData = data.products.map(image => image.default_image_urls.main_image_url)\n        } catch {\n            this.error = \"true\"\n            console.log(this.error);\n            return this.error;\n        }\n    }\n}\n\ndecorate(SearchStore, {\n    searchData: observable\n})\n\nexport default new SearchStore();"]},"metadata":{},"sourceType":"module"}